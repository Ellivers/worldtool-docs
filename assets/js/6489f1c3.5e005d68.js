"use strict";(self.webpackChunkworldtool_docs=self.webpackChunkworldtool_docs||[]).push([[6083],{4160:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>i,contentTitle:()=>n,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>a});var r=o(5893),t=o(1151);const l={sidebar_position:4},n="Processes",c={id:"making-a-plugin/processes",title:"Processes",description:"About processes and process data.",source:"@site/docs/making-a-plugin/processes.md",sourceDirName:"making-a-plugin",slug:"/making-a-plugin/processes",permalink:"/worldtool-docs/docs/making-a-plugin/processes",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Translations",permalink:"/worldtool-docs/docs/making-a-plugin/translations"},next:{title:"General Tool Operations",permalink:"/worldtool-docs/docs/making-a-plugin/general-tool-operations"}},i={},a=[{value:"Setting up Blocks per Tick",id:"setting-up-blocks-per-tick",level:2},{value:"Setting Up Files",id:"setting-up-files",level:2}];function p(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"processes",children:"Processes"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"../technical/processes",children:"About processes and process data"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"setting-up-blocks-per-tick",children:"Setting up Blocks per Tick"}),"\n",(0,r.jsx)(s.p,{children:'A "blocks per tick" value is simply how many blocks the process handles every tick. This is not required, but can help for customizability.'}),"\n",(0,r.jsxs)(s.p,{children:["All you need to do is add your blocks per tick configuration with the ",(0,r.jsxs)(s.a,{href:"hooks#setup_blocks_per_tick",children:[(0,r.jsx)(s.code,{children:"setup_blocks_per_tick"})," hook"]}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-mcfunction",children:'# Sets the default blocks per tick value and different preset values for the "myplugin:example" process\r\nexecute unless data storage worldtool:storage BlocksPerTick.Processes[{ID:"myplugin:example"}] run data modify storage worldtool:storage BlocksPerTick.Processes append value {ID:"myplugin:example",Value:4000,Presets:{Low:600,Medium:2000,High:4000}}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["You can then get the current value for your process with the ",(0,r.jsx)(s.code,{children:'BlocksPerTick.Processes[{ID:"myplugin:example"}].Value'})," data."]}),"\n",(0,r.jsx)(s.h2,{id:"setting-up-files",children:"Setting Up Files"}),"\n",(0,r.jsxs)(s.p,{children:["To follow these steps, you'll have to first have set up a process as a ",(0,r.jsx)(s.a,{href:"general-tool-operations",children:"General Tool operation"}),", ",(0,r.jsx)(s.a,{href:"brushes",children:"brush"})," or ",(0,r.jsx)(s.a,{href:"shapes",children:"shape"})," (or perhaps through a custom start system?)."]}),"\n",(0,r.jsx)(s.p,{children:"How to set up a basic process that iterates over an area:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Use the ",(0,r.jsx)(s.a,{href:"https://github.com/Ellivers/WorldTool/blob/master/other%20stuff/scripts/process_folder_generator.py",children:"process structure generator python script"}),' to more easily create a base folder structure to work from. When running the script, enter your process name (for example: "example") and the path where it\'s supposed to be (for example "myplugin',":processes",'"). Then, just copy the result folder inside the "output" folder and paste it where you want it to be.']}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["When the process structure is in place, go to the ",(0,r.jsx)(s.code,{children:"main"})," process function, delete the ",(0,r.jsx)(s.code,{children:"# PROCESS-SPECIFIC COMMANDS HERE"})," line and replace it with whatever commands you want to run for every block. Use the ",(0,r.jsx)(s.code,{children:"worldtool:process/place_block.primary"})," function to place the primary process block and the ",(0,r.jsx)(s.code,{children:"worldtool:process/place_block.secondary"})," function to place the secondary process block. Before placing a block, make sure you're not replacing a block with the same block by checking ",(0,r.jsx)(s.code,{children:"unless blocks ~ ~ ~ ~ ~ ~ 27451 1 19 all"})," (primary block) or ",(0,r.jsx)(s.code,{children:"unless blocks ~ ~ ~ ~ ~ ~ 27449 1 19 all"})," (secondary block) before placing a block."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-mcfunction",children:"# The logic that the Fill process uses\r\nexecute unless blocks ~ ~ ~ ~ ~ ~ 27451 1 19 all run function worldtool:process/place_block.primary\n"})}),"\n",(0,r.jsxs)(s.ol,{start:"3",children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["That's all for the logic itself. To make the process actually run, you need to add a check using the ",(0,r.jsxs)(s.a,{href:"hooks#processcheck_tags",children:[(0,r.jsx)(s.code,{children:"process/check_tags"})," hook"]}),". For example: ",(0,r.jsx)(s.code,{children:"execute if entity @s[tag=myplugin.process.example] run function myplugin:processes/example/main"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Your process is all ready to go!"}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);